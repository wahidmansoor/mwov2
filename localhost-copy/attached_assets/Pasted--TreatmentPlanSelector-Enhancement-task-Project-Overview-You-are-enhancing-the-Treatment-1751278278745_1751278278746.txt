# 🔬 TreatmentPlanSelector Enhancement task

## 🎯 Project Overview
You are enhancing the `TreatmentPlanSelector` component — a **clinical guidance tool for oncologists** that provides AI-powered treatment recommendations aligned with NCCN guidelines. This is **not an EHR system** but a standalone **decision support module** in the OncoVista app.

> ⏱️ *Objective: Complete enhancement within the next 30 minutes using Replit AI Dev.*

---

## 📋 Current Component Status
- Located inside: `CDUModuleComplete.tsx` (lines 562–750)
- ✅ Functional: Receives clinical inputs and outputs recommendations
- ✅ Exports to PDF
- ❌ Currently uses **hardcoded rule-based logic**
- ❌ No connection to `cd_protocols` table or any dedicated clinical DB
- ❌ No performance optimizations
- ❌ No validation/error boundaries

---

## 🚀 Enhancement Goals

### 🧠 Hybrid Recommendation Logic (AI + Database)
- Use a **combined approach**:
  - Fetch structured clinical data from the database (e.g., `cd_protocols`, `treatment_plan_selector_rules`)
  - Apply **AI-based logic on top of database data** to generate, score, and personalize recommendations
- Ensure the logic layer can:
  - Pre-filter database protocols
  - Apply biomarker-specific AI rules
  - Add alerts, contraindications, or confidence scoring using external logic or LLM-enhanced suggestions
- Recommendation explanation should include:
  - Matched database fields
  - AI-generated reasoning
  - Evidence level and guideline origin (e.g., NCCN, ESMO)


### 🧠 Clinical Intelligence
- Replace hardcoded recommendation logic with **dynamic matching from a database**
- Source protocol logic directly from **NCCN guidelines**
- Preferably create a **dedicated table** (e.g., `treatment_plan_selector_rules`) to structure rules, mappings, biomarkers, and evidence levels

### ⚙️ Performance & Architecture
- Modularize into subcomponents:
  - `InputPanel.tsx`
  - `RecommendationPanel.tsx`
  - `ExportPanel.tsx`
- Use `useMemo`, `React.memo`, and `useCallback` for performance
- Debounce all input fields
- Type everything using TypeScript interfaces

### 🗃️ Database Integration
- Connect to `cd_protocols` (or new table)
- Use React Query for fetching
- Add cache, staleTime, retry behavior
- Include localStorage/sessionStorage fallback for input state on page reload

#### Example Data Interface
```ts
interface Protocol {
  cancerType: string;
  stage: string;
  histology: string;
  biomarkers: string[];
  treatmentIntent: string;
  lineOfTreatment: string;
  drugs: string[];
  guidelineRefs: string[];
  evidenceLevel: 'I' | 'II' | 'III';
}
```

---

## 🎨 UI/UX Enhancements
- Autocomplete for cancer type and biomarkers
- Conditional biomarker visibility based on cancer type
- Visual `ConfidenceIndicator` and `EvidenceBadge`
- Comparison mode for alternate regimens
- Clinical alerts panel (warnings, flags)

#### UI Example Component Tree
```
TreatmentPlanSelector/
├── InputPanel.tsx
├── RecommendationPanel.tsx
├── ExportPanel.tsx
├── ConfidenceIndicator.tsx
```

---

## ✅ Validation & Error Handling
- Use `Zod` or `Yup` for schema validation
- Add loading skeletons, error boundaries, and retry handlers
- Show clinical-grade alerts (e.g., invalid biomarker combinations)

---

## 🧪 Testing Goals
- 95%+ unit test coverage for all clinical logic
- Validate that cancer + biomarker combinations return valid protocols
- Performance tests (render within 200ms)
- Handle rapid field switching without UI lag

---

## 📦 Suggested Libraries (Install via shell)
```bash
npm install react-hook-form zod react-query framer-motion react-select
```

---

## 📍 Feature Flags (Optional)
```ts
const FEATURES = {
  enableCombinationTherapy: true,
  enableClinicalAlerts: true,
  enableComparisonMode: false,
};
```

---

## 📌 Success Criteria

| Requirement            | Target |
|------------------------|--------|
| DB-backed recommendations | ✅ Yes |
| Confidence + evidence scoring | ✅ Yes |
| Printable PDF summary | ✅ Yes |
| Sub-second response time | ✅ Yes |
| NCCN-aligned protocols | ✅ Yes |
| Dedicated rule DB table | ✅ Preferred |

---

## ✅ Getting Started (For Replit AI Dev)
1. Go to `CDUModuleComplete.tsx` → extract and modularize `TreatmentPlanSelector`
2. Create the folder `TreatmentPlanSelector/` with components and hooks
3. Add new table if needed: `treatment_plan_selector_rules`
4. Use React Query to pull structured protocols from NCCN-aligned DB
5. Add autocomplete, scoring logic, validation, and export
6. Keep all logic strictly **clinical**, not administrative
7. Use the checklist below and proceed step-by-step

---

## 🧾 Implementation Checklist

### Phase 1 – Foundation
- [ ] Split into InputPanel / RecommendationPanel / ExportPanel
- [ ] Add types, schema validation (Zod)
- [ ] Add state debouncing and localStorage fallback

### Phase 2 – Database Wiring
- [ ] Connect to existing or new rule-matching DB table
- [ ] Replace all hardcoded rules with DB queries
- [ ] Implement protocol ranking and evidence display

### Phase 3 – Clinical Logic & Scoring
- [ ] Add confidence score system
- [ ] Add drug interaction alerts
- [ ] Implement comparison between 2–3 top protocols

### Phase 4 – UX Polish
- [ ] Responsive layout and WCAG accessibility
- [ ] Visual indicators and status badges
- [ ] Autocomplete and conditional biomarker input

### Phase 5 – Testing
- [ ] Clinical logic unit tests
- [ ] Render + performance validation
- [ ] Error and edge case tests

---

if possible to add:
- Real-time NCCN/ESMO sync
- Clinical trial suggestions
- Predictive survival outcomes
- Pharmacogenomic tailoring

---
