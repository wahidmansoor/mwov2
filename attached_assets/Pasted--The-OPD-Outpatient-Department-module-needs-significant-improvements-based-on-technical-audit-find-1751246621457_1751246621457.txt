 The OPD (Outpatient Department) module needs significant improvements based on technical audit findings. 

## CURRENT ARCHITECTURE
- Frontend: React 18, TypeScript, Vite, ShadCN UI, Tailwind CSS
- Backend: Express.js, PostgreSQL, Drizzle ORM
- AI Integration: OpenAI GPT-4, Anthropic Claude
- File Structure: `/client/src/modules/opd/` contains OPDModule.tsx and related components

## CRITICAL IMPROVEMENTS NEEDED

### 1. ENHANCED AI PROMPT ENGINEERING
**Current Issue**: Generic AI prompts with poor clinical specificity
**Implementation Required**:
```typescript
// Create cancer-type specific prompt templates in /client/src/modules/opd/prompts/
// Each cancer type (breast, colon, lung, prostate, etc.) gets specialized prompts
// Include NCCN version references, evidence categories, and structured JSON outputs
// Add confidence calibration based on symptom complexity
```

### 2. DYNAMIC RISK ASSESSMENT ALGORITHM
**Current Issue**: Static risk weighting doesn't adapt to cancer types
**Implementation Required**:
```typescript
// Refactor /client/src/modules/opd/RiskAssessment.tsx
// Create cancer-specific risk calculators with adaptive weighting
// Add missing risk factors: hormonal history, radiation exposure, prior benign disease
// Implement uncertainty handling for incomplete data
// Add temporal risk progression analysis
```

### 3. SIMPLIFIED USER INTERFACE REDESIGN
**Current Issue**: 5-tab interface is overwhelming
**Implementation Required**:
- Reduce to 3 core tabs: "Risk Assessment", "Screening Guidance", "Educational Resources"
- Add quick-action floating buttons for common tasks
- Implement progressive disclosure (show basic â†’ advanced options)
- Create customizable dashboard preferences per user

### 4. MULTI-GUIDELINE INTEGRATION
**Current Issue**: Only NCCN guidelines, no conflict resolution
**Implementation Required**:
- Integrate ASCO and ESMO guidelines into database
- Create guideline comparison interface
- Build conflict resolution logic with evidence grading display
- Add guideline update notification system

### 5. ADVANCED SYMPTOM ANALYSIS ENGINE
**Current Issue**: Shallow symptom processing without severity/temporal analysis
**Implementation Required**:
```typescript
// Create /client/src/modules/opd/services/symptomAnalysisEngine.ts
// Implement symptom severity scoring
// Add temporal pattern recognition (acute vs chronic vs progressive)
// Build symptom clustering logic for related presentations  
// Create red flag detection with urgency scoring
```

### 6. PERFORMANCE OPTIMIZATION
**Current Issue**: Heavy client-side processing, no caching, bundle size issues
**Implementation Required**:
- Move risk calculations to server-side API endpoints
- Implement Redis caching for AI responses
- Add lazy loading for tab components
- Create search optimization for guideline lookup
- Bundle splitting by module

## SPECIFIC FILES TO MODIFY/CREATE

### NEW FILES TO CREATE:
1. `/client/src/modules/opd/prompts/CancerSpecificPrompts.ts` - AI prompt templates
2. `/client/src/modules/opd/services/RiskCalculationEngine.ts` - Dynamic risk algorithms  
3. `/client/src/modules/opd/services/SymptomAnalysisEngine.ts` - Advanced symptom processing
4. `/client/src/modules/opd/services/GuidelineIntegrator.ts` - Multi-guideline handling
5. `/client/src/modules/opd/components/QuickActionPanel.tsx` - Simplified UI controls
6. `/server/services/cacheService.ts` - Redis caching implementation
7. `/server/api/riskCalculation.ts` - Server-side risk calculation endpoints

### FILES TO REFACTOR:
1. `/client/src/modules/opd/OPDModule.tsx` - Reduce from 5 to 3 tabs, add quick actions
2. `/client/src/modules/opd/RiskAssessment.tsx` - Implement dynamic risk algorithms
3. `/client/src/modules/opd/DiagnosticTools.tsx` - Integrate advanced symptom analysis
4. `/client/src/modules/opd/ScreeningProtocols.tsx` - Multi-guideline display
5. `/server/services/aiService.ts` - Add prompt versioning and caching

## IMPLEMENTATION PRIORITIES

### PHASE 1 (IMMEDIATE - Week 1):
- Refactor OPDModule.tsx to 3-tab interface
- Create cancer-specific AI prompt templates
- Implement basic Redis caching for AI responses
- Add quick-action floating buttons

### PHASE 2 (MEDIUM-TERM - Week 2-3):
- Build dynamic risk calculation engine
- Create advanced symptom analysis service
- Integrate ASCO/ESMO guidelines into database
- Implement server-side risk calculation APIs

### PHASE 3 (STRATEGIC - Week 4+):
- Add A/B testing framework for prompt optimization
- Create guideline conflict resolution interface
- Implement adaptive learning from user feedback
- Add comprehensive error handling and fallbacks

## TECHNICAL REQUIREMENTS
- Maintain TypeScript strict mode
- Use existing ShadCN UI components where possible
- Follow current database schema patterns
- Preserve existing authentication system
- Ensure mobile responsiveness
- Maintain <2 second response times for clinical queries

## SUCCESS METRICS
- Reduce OPD module load time by 50%
- Increase AI confidence accuracy through better prompts
- Simplify user workflow from 5 steps to 3 steps average
- Support 3+ guideline sources simultaneously
- Cache hit rate >70% for common queries

## SPECIFIC CODING INSTRUCTIONS
1. Use existing project patterns and file structure
2. Implement proper error boundaries for each new service
3. Add comprehensive TypeScript interfaces for all new data structures
4. Use React Query for data fetching with proper cache invalidation
5. Implement proper loading states and error handling for all async operations
6. Add proper Zod validation for all API endpoints
7. Use existing audit logging patterns for new functionality

Please implement these improvements systematically, starting with Phase 1. Focus on clinical guidance quality and user experience optimization while maintaining the existing technical architecture. Each implementation should include proper testing and documentation.

## DELIVERABLES EXPECTED
- Complete code implementation for all phases
- Updated component interfaces and API documentation  
- Performance benchmarks before/after implementation
- User experience flow diagrams for the new 3-tab interface
- Database migration scripts for new guideline integrations