import { Request, Response } from "express";
import { aiService } from "../services/aiService.js";
import { logger, logClinicalEvent } from "../utils/logger.js";
import { asyncHandler } from "../utils/errorHandler.js";
import { 
  aiSummarizeSchema, 
  aiExplainSchema, 
  aiCompareSchema 
} from "../utils/validation.js";

export const summarizeProtocol = asyncHandler(async (req: Request, res: Response) => {
  const input = aiSummarizeSchema.parse(req.body);
  const summary = await aiService.summarizeProtocol(input);
  
  logClinicalEvent('ai_summarization', {
    slug: input.slug,
    type: input.type,
    length: input.length,
    userId: req.headers['x-user-id'] || 'anonymous'
  });
  
  logger.info({ input }, 'Protocol summarized by AI');
  res.json({
    ...summary,
    timestamp: new Date().toISOString(),
    disclaimer: "AI-generated summary for educational purposes. Verify with original protocol."
  });
});

export const explainEducation = asyncHandler(async (req: Request, res: Response) => {
  const input = aiExplainSchema.parse(req.body);
  const explanation = await aiService.explainEducation(input);
  
  logClinicalEvent('ai_explanation', {
    topic: input.topic,
    level: input.level,
    userId: req.headers['x-user-id'] || 'anonymous'
  });
  
  logger.info({ input }, 'Educational explanation generated by AI');
  res.json({
    ...explanation,
    timestamp: new Date().toISOString(),
    disclaimer: "AI-generated explanation for educational purposes. Consult authoritative sources."
  });
});

export const compareGuidelines = asyncHandler(async (req: Request, res: Response) => {
  const input = aiCompareSchema.parse(req.body);
  const comparison = await aiService.compareGuidelines(input);
  
  logClinicalEvent('ai_comparison', {
    guidelines: input.guidelines,
    guidelineCount: input.guidelines.length,
    userId: req.headers['x-user-id'] || 'anonymous'
  });
  
  logger.info({ input }, 'Guidelines compared by AI');
  res.json({
    ...comparison,
    timestamp: new Date().toISOString(),
    disclaimer: "AI-generated comparison. Review original guidelines for complete information."
  });
});

export const generateTreatmentPlan = asyncHandler(async (req: Request, res: Response) => {
  // This would use a more complex schema for patient data
  const patientData = req.body;
  const treatmentPlan = await aiService.generateTreatmentPlan(patientData);
  
  logClinicalEvent('ai_treatment_plan', {
    patientAge: patientData.age,
    diagnosis: patientData.diagnosis,
    userId: req.headers['x-user-id'] || 'anonymous'
  });
  
  logger.info({ patientData: { ...patientData, name: '[REDACTED]' } }, 'Treatment plan generated by AI');
  res.json({
    ...treatmentPlan,
    timestamp: new Date().toISOString(),
    disclaimer: "AI-generated treatment suggestions. Requires physician review and approval."
  });
});
