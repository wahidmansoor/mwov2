// REFACTOR: Create dedicated export service for multiple formats
import { CompiledReport, ExportOptions } from '../types';

export interface ExportResult {
  success: boolean;
  blob?: Blob;
  filename?: string;
  error?: string;
}

export class ExportService {
  /**
   * Main export method with format selection
   */
  async export(report: CompiledReport, options: ExportOptions): Promise<ExportResult> {
    try {
      switch (options.format) {
        case 'json':
          return this.exportToJSON(report, options);
        case 'pdf':
          return this.exportToPDF(report, options);
        case 'csv':
          return this.exportToCSV(report, options);
        case 'hl7-fhir':
          return this.exportToFHIR(report, options);
        default:
          throw new Error(`Unsupported export format: ${options.format}`);
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Export failed'
      };
    }
  }

  /**
   * Export to JSON format
   */
  private async exportToJSON(report: CompiledReport, options: ExportOptions): Promise<ExportResult> {
    try {
      const exportData = {
        ...report,
        exportMetadata: {
          exportedAt: new Date().toISOString(),
          exportOptions: options,
          format: 'json',
          version: '1.0'
        }
      };

      // REFACTOR: Anonymize if requested
      if (options.anonymize) {
        exportData.patientId = this.anonymizeId(exportData.patientId);
        exportData.generatedBy = 'OncoVista System';
      }

      const jsonString = JSON.stringify(exportData, null, 2);
      const blob = new Blob([jsonString], { type: 'application/json' });
      const filename = this.generateFilename(report, 'json');

      return {
        success: true,
        blob,
        filename
      };
    } catch (error) {
      return {
        success: false,
        error: `JSON export failed: ${error}`
      };
    }
  }

  /**
   * Export to PDF format (placeholder for actual PDF generation)
   */
  private async exportToPDF(report: CompiledReport, options: ExportOptions): Promise<ExportResult> {
    try {
      // TODO: Implement actual PDF generation using jsPDF or similar
      const pdfContent = this.generatePDFContent(report, options);
      const blob = new Blob([pdfContent], { type: 'application/pdf' });
      const filename = this.generateFilename(report, 'pdf');

      return {
        success: true,
        blob,
        filename
      };
    } catch (error) {
      return {
        success: false,
        error: `PDF export failed: ${error}`
      };
    }
  }

  /**
   * Export to CSV format
   */
  private async exportToCSV(report: CompiledReport, options: ExportOptions): Promise<ExportResult> {
    try {
      const csvContent = this.generateCSVContent(report, options);
      const blob = new Blob([csvContent], { type: 'text/csv' });
      const filename = this.generateFilename(report, 'csv');

      return {
        success: true,
        blob,
        filename
      };
    } catch (error) {
      return {
        success: false,
        error: `CSV export failed: ${error}`
      };
    }
  }

  /**
   * Export to HL7 FHIR format
   */
  private async exportToFHIR(report: CompiledReport, options: ExportOptions): Promise<ExportResult> {
    try {
      const fhirBundle = this.generateFHIRBundle(report, options);
      const jsonString = JSON.stringify(fhirBundle, null, 2);
      const blob = new Blob([jsonString], { type: 'application/fhir+json' });
      const filename = this.generateFilename(report, 'json', 'fhir');

      return {
        success: true,
        blob,
        filename
      };
    } catch (error) {
      return {
        success: false,
        error: `FHIR export failed: ${error}`
      };
    }
  }

  /**
   * Generate PDF content (placeholder)
   */
  private generatePDFContent(report: CompiledReport, options: ExportOptions): string {
    // TODO: Replace with actual PDF generation
    const content = `
ONCOVISTA CLINICAL NOTES COMPILATION REPORT
==========================================

Case ID: ${options.anonymize ? this.anonymizeId(report.patientId) : report.patientId}
Report Type: ${report.reportType}
Date Range: ${report.dateRange}
Generated: ${report.generatedAt}

CLINICAL SUMMARY
================
${report.sections.summary}

PROGRESS NOTES
==============
${report.sections.progressNotes}

ASSESSMENT & PLAN
=================
${report.sections.assessmentAndPlan}

CLINICAL RECOMMENDATIONS
========================
${report.sections.clinicalRecommendations}

DISCLAIMER
==========
This report is generated by OncoVista AI for clinical decision support and educational purposes only.
It is not intended to replace professional medical judgment or clinical assessment.
All clinical decisions should be made by qualified healthcare professionals.
${options.anonymize ? 'Patient identifiers have been anonymized.' : 'No patient-identifiable information is stored or transmitted.'}
    `;

    return content;
  }

  /**
   * Generate CSV content
   */
  private generateCSVContent(report: CompiledReport, options: ExportOptions): string {
    const headers = ['Section', 'Content', 'Generated_At', 'Case_ID'];
    const rows = [
      ['Summary', this.escapeCsvValue(report.sections.summary), report.generatedAt, options.anonymize ? this.anonymizeId(report.patientId) : report.patientId],
      ['Progress_Notes', this.escapeCsvValue(report.sections.progressNotes), report.generatedAt, options.anonymize ? this.anonymizeId(report.patientId) : report.patientId],
      ['Assessment_Plan', this.escapeCsvValue(report.sections.assessmentAndPlan), report.generatedAt, options.anonymize ? this.anonymizeId(report.patientId) : report.patientId],
      ['Recommendations', this.escapeCsvValue(report.sections.clinicalRecommendations), report.generatedAt, options.anonymize ? this.anonymizeId(report.patientId) : report.patientId]
    ];

    return [headers.join(','), ...rows.map(row => row.join(','))].join('\n');
  }

  /**
   * Generate HL7 FHIR Bundle
   */
  private generateFHIRBundle(report: CompiledReport, options: ExportOptions): any {
    return {
      resourceType: 'Bundle',
      id: `bundle-${Date.now()}`,
      meta: {
        lastUpdated: new Date().toISOString(),
        profile: ['http://hl7.org/fhir/StructureDefinition/Bundle']
      },
      type: 'collection',
      entry: [
        {
          resource: {
            resourceType: 'Composition',
            id: `composition-${Date.now()}`,
            status: 'final',
            type: {
              coding: [{
                system: 'http://loinc.org',
                code: '11506-3',
                display: 'Progress note'
              }]
            },
            subject: {
              reference: options.anonymize ? `Patient/anonymous-${this.anonymizeId(report.patientId)}` : `Patient/${report.patientId}`
            },
            date: report.generatedAt,
            author: [{
              display: 'OncoVista AI System'
            }],
            title: 'Clinical Notes Compilation Report',
            section: [
              {
                title: 'Clinical Summary',
                text: {
                  status: 'generated',
                  div: `<div>${report.sections.summary}</div>`
                }
              },
              {
                title: 'Progress Notes',
                text: {
                  status: 'generated',
                  div: `<div>${report.sections.progressNotes}</div>`
                }
              },
              {
                title: 'Assessment and Plan',
                text: {
                  status: 'generated',
                  div: `<div>${report.sections.assessmentAndPlan}</div>`
                }
              },
              {
                title: 'Clinical Recommendations',
                text: {
                  status: 'generated',
                  div: `<div>${report.sections.clinicalRecommendations}</div>`
                }
              }
            ]
          }
        }
      ]
    };
  }

  /**
   * Utility methods
   */
  private generateFilename(report: CompiledReport, extension: string, prefix?: string): string {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const caseId = report.patientId.replace(/[^a-zA-Z0-9]/g, '');
    const prefixPart = prefix ? `${prefix}-` : '';
    
    return `${prefixPart}oncovista-report-${caseId}-${timestamp}.${extension}`;
  }

  private anonymizeId(id: string): string {
    // Simple anonymization - replace with hash in production
    return `ANON-${id.slice(-4).toUpperCase()}`;
  }

  private escapeCsvValue(value: string): string {
    // Escape CSV values
    if (value.includes(',') || value.includes('"') || value.includes('\n')) {
      return `"${value.replace(/"/g, '""')}"`;
    }
    return value;
  }

  /**
   * Download helper method
   */
  downloadFile(blob: Blob, filename: string): void {
    try {
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      throw new Error(`Download failed: ${error}`);
    }
  }

  /**
   * Copy to clipboard helper
   */
  async copyToClipboard(report: CompiledReport): Promise<void> {
    try {
      const textContent = `
Clinical Summary: ${report.sections.summary}

Progress Notes: ${report.sections.progressNotes}

Assessment & Plan: ${report.sections.assessmentAndPlan}

Recommendations: ${report.sections.clinicalRecommendations}
      `.trim();

      await navigator.clipboard.writeText(textContent);
    } catch (error) {
      throw new Error(`Copy to clipboard failed: ${error}`);
    }
  }
}
